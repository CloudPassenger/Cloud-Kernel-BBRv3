name: Build Debian Kernel (x86_64)

on:
  repository_dispatch:
    types: [trigger-x86_64-build]
  workflow_dispatch:
    inputs:
      kernel_version:
        description: "Kernel version"
        required: true
        default: "6.12.21"
        type: string
      skip_cache:
        description: "Skip Cache"
        required: false
        default: false
        type: boolean

jobs:
  prepare:
    name: Prepare Build Parameters
    runs-on: ubuntu-24.04
    outputs:
      kernel_version: ${{ steps.prepare_build_parameters.outputs.KERNEL_VERSION }}
      kernel_minor_version: ${{ steps.prepare_build_parameters.outputs.KERNEL_MINOR_VERSION }}
      kernel_major_version: ${{ steps.prepare_build_parameters.outputs.KERNEL_MAJOR_VERSION }}
      skip_cache: ${{ steps.prepare_build_parameters.outputs.SKIP_CACHE }}
    steps:
      - name: Prepare Build Parameters
        id: prepare_build_parameters
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            KERNEL_VERSION="${{ github.event.client_payload.kernel_version }}"
            KERNEL_MINOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d '.' -f 2)
            KERNEL_MAJOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d '.' -f 1)
            SKIP_CACHE=false
          else
            KERNEL_VERSION="${{ inputs.kernel_version }}"
            KERNEL_MINOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d '.' -f 2)
            KERNEL_MAJOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d '.' -f 1)
            SKIP_CACHE="${{ inputs.skip_cache }}" || SKIP_CACHE=false
          fi
          if [ -z "$KERNEL_VERSION" ]; then
            echo "❌ Failed to get kernel version"
            exit 1
          fi
          echo "✅ Using kernel version: $KERNEL_VERSION"
          echo "✅ Using kernel minor version: $KERNEL_MINOR_VERSION"
          echo "✅ Using kernel major version: $KERNEL_MAJOR_VERSION"
          echo "✅ Using skip cache: $SKIP_CACHE"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "KERNEL_MINOR_VERSION=$KERNEL_MINOR_VERSION" >> $GITHUB_OUTPUT
          echo "KERNEL_MAJOR_VERSION=$KERNEL_MAJOR_VERSION" >> $GITHUB_OUTPUT
          echo "SKIP_CACHE=$SKIP_CACHE" >> $GITHUB_OUTPUT

  build:
    name: Build Debian Kernel Package for x86_64
    runs-on: ubuntu-24.04
    needs: prepare
    outputs:
      kernel_version: ${{ needs.prepare.outputs.kernel_version }}
      build_time: ${{ steps.get_build_time.outputs.BUILD_TIMESTAMP }}
    steps:
      - name: Update and install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git patch jq openssl quilt \
            libncurses-dev libssl-dev libelf-dev libudev-dev libpci-dev libcap-dev libpcre2-dev libcurl4-openssl-dev \
            bison bc flex rsync debhelper lz4 pahole zstd dpkg-dev fakeroot kmod cpio xz-utils

      - name: Checkout Workflow Source Code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: Download Linux Kernel Source
        run: |
          echo "⌛ Downloading Linux Kernel Source Code for ${{ needs.prepare.outputs.kernel_version }}..."
          wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${{ needs.prepare.outputs.kernel_version }}.tar.xz
          tar -xf linux-${{ needs.prepare.outputs.kernel_version }}.tar.xz
          rm linux-${{ needs.prepare.outputs.kernel_version }}.tar.xz
          mv linux-${{ needs.prepare.outputs.kernel_version }} linux
          echo "✅ Downloaded Linux Kernel Source Code for ${{ needs.prepare.outputs.kernel_version }}"
      - name: Download Debian Kernel Additional Source
        run: |
          echo "⌛ Downloading Debian Kernel Additional Source..."
          git clone -b debian/${{ needs.prepare.outputs.kernel_version }}-1 --depth=1 https://salsa.debian.org/kernel-team/linux.git linux-debian
          echo "✅ Downloaded Debian Kernel Additional Source"
      - name: Download Xanmod Patches
        run: |
          echo "⌛ Downloading Xanmod Patches..."
          git clone --depth=1 https://gitlab.com/xanmod/linux-patches.git linux-xanmod-patches
          echo "✅ Downloaded Xanmod Patches"
      - name: Checkout ECHO-CPU-Scheduler
        uses: actions/checkout@v4
        with:
          repository: hamadmarri/ECHO-CPU-Scheduler
          path: echo-patches
      - name: Organize Patches
        run: |
          echo "⌛ Organizing Patches..."
          cd linux
          cp -R ../linux-debian/debian/patches ./patches
          echo "⭕ Copied Debian Patches"
          cp -R ../linux-xanmod-patches/linux-${{ needs.prepare.outputs.kernel_major_version }}.${{ needs.prepare.outputs.kernel_minor_version }}.y-xanmod/net ./patches/net
          echo "⭕ Copied Xanmod Net Patches"
          cp -R ../echo-patches/${{ needs.prepare.outputs.kernel_major_version }}.${{ needs.prepare.outputs.kernel_minor_version }}.y ./patches/cpu-scheduler
          echo "⭕ Copied ECHO-CPU-Scheduler Patches"
          cp -R ../patches ./patches/custom
          cd patches
          echo "# Net Patches from Xanmod" >> series
          find ./net -type f -name "*.patch" -printf "net/%P\n" | sort >> series
          echo "# CPU Scheduler Patches from ECHO-CPU-Scheduler" >> series
          find ./cpu-scheduler -type f -name "*.patch" -printf "cpu-scheduler/%P\n" | sort >> series
          echo "# Custom Patches" >> series
          find ./custom -type f -name "*.patch" -printf "custom/%P\n" | sort >> series
          echo "✅ All Patches Organized"
      - name: Apply Patches
        run: |
          echo "⌛ Applying Patches..."
          cd linux
          quilt push -a --fuzz=0
          echo "✅ All Patches Applied"
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"
      - name: Set sccache environment variables
        run: |
          # Use Local storage for sccache, and push it to GHA later
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV
          echo "SCCACHE_DIR=/home/runner/.cache/sccache" >> $GITHUB_ENV
          echo "DATE_STRING=$(date +'%Y%m%d')" >> $GITHUB_ENV
      - name: Setup Github Cache for Build
        uses: actions/cache@v4
        env:
          SCCACHE_DIR: ${{ env.SCCACHE_DIR }}
          DATE_STRING: ${{ env.DATE_STRING }}
        with:
          path: ${{ env.SCCACHE_DIR }}
          lookup-only: ${{ needs.prepare.outputs.skip_cache }}
          key: sccache-${{ needs.prepare.outputs.kernel_major_version }}.${{ needs.prepare.outputs.kernel_minor_version }}-amd64-${{ env.DATE_STRING }}
          restore-keys: |
            sccache-${{ needs.prepare.outputs.kernel_major_version }}.${{ needs.prepare.outputs.kernel_minor_version }}-amd64-
      - name: Configure Kernel Build
        run: |
          echo "⌛ Configuring Kernel Build..."
          cd linux
          cp ../configs/x86_64.config .config
          echo "⭕ Copied Pre-Configured .config from x86_64"
          make CC="sccache gcc" HOSTCC="sccache gcc" olddefconfig
          echo "✅ Final Kernel Build Configured for x86_64"
      - name: Build Kernel (Debian Package)
        env:
          KBUILD_BUILD_USER: "cloudpassenger"
          KBUILD_BUILD_HOST: "github-actions"
          KBUILD_BUILD_TIMESTAMP: ""
          KDEB_COMPRESS: "xz"
        run: |
          echo "⌛ Start Building Kernel (Debian Package) for x86_64..."
          cd linux
          make -j $(nproc) CC="sccache gcc" HOSTCC="sccache gcc" bindeb-pkg
          echo "✅ Kernel (Debian Package) Built Successfully"
          cp .config ../linux-${{ needs.prepare.outputs.kernel_version }}-amd64.config
          echo "✅ Copied Kernel Config"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-x86_64
          path: |
            *.deb
            *.changes
            *.buildinfo
            *.config
      - name: Get build time
        id: get_build_time
        run: |
          BUILD_TIMESTAMP=$(date -Is)
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=$BUILD_TIMESTAMP"
          echo "🏷️ Build Time: $BUILD_TIMESTAMP"
  
  create-release:
    name: Create Release
    needs: [prepare, build]
    runs-on: ubuntu-24.04
    steps:
      - name: Download Artifacts for x86_64
        uses: actions/download-artifact@v4
        with:
          name: kernel-x86_64
          path: ./
      - name: Remove Debug Package in Release
        run: |
          rm -f linux-image-*-dbg_*.deb
      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.kernel_version }}
          name: Debian Cloud Kernel ${{ needs.prepare.outputs.kernel_version }} with BBR3 (amd64)
          body: |
            🚀 **Kernel Version:** `${{ needs.prepare.outputs.kernel_version }}`

            📅 **Build Time:** `${{ needs.build.outputs.build_time }}`

            🛠️ **Build Information:**
            - **Architecture:** `amd64`
            - **Kernel Type:** `cloud`
            - **Applied Patches:**
              - `Debian Patches Collection` (from [kernel-team/linux](https://salsa.debian.org/kernel-team/linux/))
              - `BBR V3` (from [xanmod/linux-patches](https://gitlab.com/xanmod/linux-patches))
              - `BBRPlus` (modified from [UJX6N/bbrplus-6.x_stable](https://github.com/UJX6N/bbrplus-6.x_stable))
              - `TCP Brutal` (from [apernet/tcp-brutal](https://github.com/apernet/tcp-brutal))
              - `ECHO-CPU-Scheduler` (from [hamadmarri/ECHO-CPU-Scheduler](https://github.com/hamadmarri/ECHO-CPU-Scheduler))
            
            --------
            
            🚀 **内核版本:** `${{ needs.prepare.outputs.kernel_version }}`

            📅 **构建时间:** `${{ needs.build.outputs.build_time }}`

            🛠️ **构建信息:**
            - **架构:** `amd64`
            - **内核类型:** `cloud`
            - **应用补丁:**
              - `Debian 补丁集合` (来自 [kernel-team/linux](https://salsa.debian.org/kernel-team/linux/))
              - `BBR V3` (来自 [xanmod/linux-patches](https://gitlab.com/xanmod/linux-patches))
              - `BBRPlus` (修改自 [UJX6N/bbrplus-6.x_stable](https://github.com/UJX6N/bbrplus-6.x_stable))
              - `TCP Brutal` (来自 [apernet/tcp-brutal](https://github.com/apernet/tcp-brutal))
              - `ECHO-CPU-Scheduler` (来自 [hamadmarri/ECHO-CPU-Scheduler](https://github.com/hamadmarri/ECHO-CPU-Scheduler))
          files: |
            *.deb
            *.changes
            *.buildinfo
            *.config
        

